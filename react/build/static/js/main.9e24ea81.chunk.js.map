{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","client","W3CWebSocket","am4core","am4themes_animated","App","props","state","data1","chart","am4charts","paddingRight","data","this","hiddenState","properties","opacity","padding","zoomOutButton","disabled","dateAxis","xAxes","push","dataFields","category","renderer","grid","template","location","valueAxis","yAxes","tooltip","minWidth","series","categoryX","valueY","tooltipText","cursor","scrollbarX","setState","chart1","dispose","onopen","console","log","onmessage","message","i","length","dat","mess","parseFloat","forceUpdate","id","style","width","height","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,qMCSrCC,G,KAAS,IAAIC,eAAa,2BAEhCC,IAAiBC,K,IA8EFC,E,kDA3Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,MAAO,IAFJ,E,gEAOjB,IAAIC,EAAQN,IAAe,WAAYO,KACvCD,EAAME,aAAe,GASrBF,EAAMG,KAAOC,KAAKN,MAAMC,MACxBC,EAAMK,YAAYC,WAAWC,QAAU,EAEvCP,EAAMQ,QAAQ,EAAG,EAAG,EAAG,GAEvBR,EAAMS,cAAcC,UAAW,EAE/B,IAAIC,EAAWX,EAAMY,MAAMC,KAAK,IAAIZ,KACpCU,EAASG,WAAWC,SAAW,MAC/BJ,EAASK,SAASC,KAAKC,SAASC,SAAW,EAE3C,IAAIC,EAAYpB,EAAMqB,MAAMR,KAAK,IAAIZ,KACrCmB,EAAUE,QAAQZ,UAAW,EAC7BU,EAAUJ,SAASO,SAAW,GAE9B,IAAIC,EAASxB,EAAMwB,OAAOX,KAAK,IAAIZ,KACnCuB,EAAOV,WAAWW,UAAY,MAC9BD,EAAOV,WAAWY,OAAS,OAE3BF,EAAOG,YAAc,iBACrB3B,EAAM4B,OAAS,IAAI3B,IAEnB,IAAI4B,EAAa,IAAI5B,IACrB4B,EAAWL,OAAOX,KAAKW,GACvBxB,EAAM6B,WAAaA,EACnBzB,KAAK0B,SAAS,CAAC/B,MAAO,GAAIgC,OAAQ/B,IAClCI,KAAKJ,MAAQA,I,6CAITI,KAAKJ,OACPI,KAAKJ,MAAMgC,Y,2CAIO,IAAD,OACnBxC,EAAOyC,OAAS,WACdC,QAAQC,IAAI,+BAEd3C,EAAO4C,UAAY,SAACC,GAClB,IAAItC,EAAQ,EAAKD,MAAMC,MACnBuC,EAAIvC,EAAMwC,OACdxC,EAAMc,KAAK,CAAC2B,IAAKF,EAAGG,KAAMC,WAAWL,EAAQlC,QAC7C,IAAIH,EAAQ,EAAKF,MAAMiC,OACvB/B,EAAMG,KAAOJ,EACb,EAAK+B,SAAS,CAAC/B,MAAOA,EAAOgC,OAAQ/B,KAGvCI,KAAKuC,gB,+BAIL,OACE,yBAAKC,GAAG,WAAWC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,e,GAvEvCC,aCDEC,QACW,cAA7BC,OAAO/B,SAASgC,UAEe,UAA7BD,OAAO/B,SAASgC,UAEhBD,OAAO/B,SAASgC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAM5B,c","file":"static/js/main.9e24ea81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport {length} from \"@amcharts/amcharts4/.internal/core/utils/Iterator\";\n\nconst client = new W3CWebSocket('ws://127.0.0.1:8000/ws');\n\nam4core.useTheme(am4themes_animated);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {data1: []};\n  }\n\n  componentDidMount() {\n\n    let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\n    chart.paddingRight = 20;\n    let data2 = [\n        {dat: 0, mess: 0},\n        {dat: 1, mess: -0.06855538345504619},\n        {dat: 2, mess: -0.20785627268390527},\n        {dat: 3, mess: -0.3367407359189887},\n        {dat: 4, mess: -0.43759390824553923},\n        {dat: 5, mess: -0.7081410511650416}\n    ]\n    chart.data = this.state.data1;\n    chart.hiddenState.properties.opacity = 0;\n\n    chart.padding(0, 0, 0, 0);\n\n    chart.zoomOutButton.disabled = true;\n\n    let dateAxis = chart.xAxes.push(new am4charts.CategoryAxis());\n    dateAxis.dataFields.category = \"dat\";\n    dateAxis.renderer.grid.template.location = 0;\n\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n\n    let series = chart.series.push(new am4charts.LineSeries());\n    series.dataFields.categoryX = \"dat\";\n    series.dataFields.valueY = \"mess\";\n\n    series.tooltipText = \"{valueY.value}\";\n    chart.cursor = new am4charts.XYCursor();\n\n    let scrollbarX = new am4charts.XYChartScrollbar();\n    scrollbarX.series.push(series);\n    chart.scrollbarX = scrollbarX;\n    this.setState({data1: [], chart1: chart});\n    this.chart = chart;\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  componentWillMount() {\n    client.onopen = () => {\n      console.log('WebSocket Client Connected');\n    };\n    client.onmessage = (message) => {\n      let data1 = this.state.data1;\n      let i = data1.length\n      data1.push({dat: i, mess: parseFloat(message.data)});\n      let chart = this.state.chart1;\n      chart.data = data1;\n      this.setState({data1: data1, chart1: chart});\n\n    };\n    this.forceUpdate();\n  }\n\n  render() {\n    return (\n      <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}